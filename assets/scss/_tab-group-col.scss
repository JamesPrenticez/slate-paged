@import '../../../node_modules/bootstrap/scss/functions';
@import '../../../node_modules/bootstrap/scss/variables';
@import '../../../node_modules/bootstrap/scss/mixins';

@mixin make-tab-group-grid-columns(
  $columns: $grid-columns,
  $gutter: $grid-gutter-width,
  $breakpoints: $grid-breakpoints
) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @if $columns > 0 {
      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns {
        .tg-col#{$infix}-#{$i} {
          @extend %grid-column;
        }
      }
    }

    .tg-col#{$infix},
    .tg-col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .tg-col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        min-width: 0; // See https://github.com/twbs/bootstrap/issues/25410
        max-width: 100%;
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .tg-row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .tg-col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .tg-col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }
      }

      .tg-order#{$infix}-first {
        order: -1;
      }

      .tg-order#{$infix}-last {
        order: $columns + 1;
      }

      @for $i from 0 through $columns {
        .tg-order#{$infix}-#{$i} {
          order: $i;
        }
      }

      @if $columns > 0 {
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not($infix == '' and $i == 0) {
            // Avoid emitting useless .offset-0
            .tg-offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}

@function calc-breakpoints($multipier: 1, $breakpoints: $grid-breakpoints) {
  $new-breakpoints: ();

  @each $breakpoint, $pixel in $breakpoints {
    $new-breakpoints: map-merge(
      $map1: $new-breakpoints,
      $map2: (
        $breakpoint: $pixel * $multipier
      )
    );
  }

  @return $new-breakpoints;
}

.tab-group-12 {
  @include make-tab-group-grid-columns();
}

.tab-group-6 {
  @include make-tab-group-grid-columns(
    $grid-columns,
    $grid-gutter-width,
    calc-breakpoints(2)
  );
}

.tab-group-4 {
  @include make-tab-group-grid-columns(
    $grid-columns,
    $grid-gutter-width,
    calc-breakpoints(3)
  );
}
